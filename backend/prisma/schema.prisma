datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String @id @default(uuid())
  email          String @unique
  hashedPassword String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id    String @id @default(uuid())
  name  String
  email String[]

  contracts Contract[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Contract {
  id              String        @id @default(uuid())
  clientId        String
  client          Client        @relation(fields: [clientId], references: [id], onDelete: Restrict)
  emailTemplateId String
  emailTemplate   EmailTemplate @relation(fields: [emailTemplateId], references: [id], onDelete: Restrict)
  amountHT        Float
  taxRate         Float
  paymentDelay    Int
  title           String
  description     String?
  startDate       DateTime
  endDate         DateTime

  invoices Invoice[]
  history  ContractHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@index([startDate])
  @@index([endDate])
}

enum ContractChangeType {
  AMOUNTHT_UPDATE
  TAXRATE_UPDATE
  PAYMENT_DELAY_UPDATE
  TITLE_UPDATE
  DESCRIPTION_UPDATE
  STARTDATE_UPDATE
  ENDDATE_UPDATE
}

model ContractHistory {
  id         Int                @id @default(autoincrement())
  contractId String
  contract   Contract           @relation(fields: [contractId], references: [id], onDelete: Cascade)
  changeType ContractChangeType
  oldValue   String?
  newValue   String?
  createdAt  DateTime           @default(now())

  @@index([contractId])
}

model InvoiceNumberSequence {
  id         Int      @id @default(autoincrement())
  year       Int      @unique
  lastNumber Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum InvoiceStatus {
  DRAFT
  VALIDATED
  SENT
  PAID
}

model Invoice {
  id            String        @id @default(uuid())
  contractId    String
  contract      Contract      @relation(fields: [contractId], references: [id], onDelete: Restrict)
  invoiceNumber String?        @unique
  amountHT      Float
  taxRate       Float
  status        InvoiceStatus @default(DRAFT)
  paymentDelay    Int
  dueDate       DateTime?
  sendDate      DateTime?
  fileId        String?

  items InvoiceItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contractId])
  @@index([status])
  @@index([dueDate])
}

model InvoiceItem {
  id          Int     @id @default(autoincrement())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  description String
  amount      Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([invoiceId])
}

model EmailTemplate {
  id      String @id @default(uuid())
  name    String
  subject String
  content String

  Contract Contract[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}
